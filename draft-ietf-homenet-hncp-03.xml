<?xml version='1.0' ?>
<!--
Created:       Mon Nov 18 17:55:22 2013 mstenber

split from draft-ietf-homenet-hncp-03-pre - homenet specific ones

-->

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>

<?rfc autobreaks="yes"?>
<?rfc compact="yes"?>
<?rfc strict='yes'?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>

<rfc
    ipr='trust200902'
    docName='draft-ietf-homenet-hncp-03'
    category='std'
    >
  <front>
    <title abbrev="Home Networking Control Protocol">
      Home Networking Control Protocol
    </title>
    <author initials="M" surname="Stenberg" fullname="Markus Stenberg">
      <address>
        <postal>
          <street/>
          <city>Helsinki</city>
          <code>00930</code>
          <country>Finland</country>
        </postal>
        <email>markus.stenberg@iki.fi</email>
      </address>
    </author>
    <author initials="S" surname="Barth" fullname="Steven Barth">
      <address>
        <postal>
          <street/>
          <city>Halle</city>
          <code>06114</code>
          <country>Germany</country>
        </postal>
        <email>cyrus@openwrt.org</email>
      </address>
    </author>
    <date month="October" year="2014" />

    <area>Internet</area>
    <workgroup>Homenet Working Group</workgroup>

    <keyword>IPv6</keyword>
    <keyword>Homenet</keyword>
    <keyword>DNCP</keyword>
    <abstract>

      <t>This document describes the Home Networking Control Protocol
      (HNCP), a lightweight configuration protocol for home network
      devices on top of the Distributed Node Consensus Protocol (DNCP).</t>

    </abstract>
  </front>
  <middle>
    <section title="Introduction">

      <t>HNCP is designed to synchronize state across a homenet (or other
      small site) in order to facilitate automated configuration within the
      site. The design supports border discovery, address prefix distribution
      <xref target="I-D.ietf-homenet-prefix-assignment" />, and service
      discovery across multiple links.</t>

      <t>HNCP is designed to provide enough information for
      a routing protocol to operate without homenet-specific
      extensions. In homenet environments where multiple IPv6 prefixes are
      present, routing based on source and destination address is
      necessary <xref target="RFC7368" />.</t>

      <t>A GPLv2-licensed implementation of HNCP is
      currently under development at <eref target="https://github.com/sbyx/hnetd/">https://github.com/sbyx/hnetd/</eref>
      and binaries are available in the <eref
      target="http://www.openwrt.org">OpenWrt</eref> package repositories.
      See <eref target="http://www.homewrt.org/doku.php?id=run-conf" /> for more information.
      Feedback and contributions are welcome.</t>
    </section>

    <section anchor="kwd" title='Requirements language'>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      <xref target='RFC2119'>RFC 2119</xref>.</t>

    </section>

    <section title="DNCP Profile">
    	<t>HNCP is defined as a profile of DNCP with the following parameters:
    	
    	<list style="symbols">
    		<t>HNCP uses UDP-datagrams on port HNCP-UDP-PORT as a transport over
    	 	link-local scoped IPv6,	using unicast and multicast (group All-Homenet-Routers).
    	 	Messages with an IPv6 source or destination address which is not link-local scoped
    	 	MUST be ignored.</t>
    	 	
    		<t>HNCP unicast message exchanges SHOULD be secured using <xref target="RFC6347">DTLS</xref> as described
    		in DNCP if done over unsecured links. UDP on port HNCP-DTLS-PORT is used for this purpose.
    		A node implementing the security mechanism MUST support the DNCP Pre-Shared Key and PKI-based trust methods 
    		and SHOULD support DNCP Certificate Based Trust Consensus in addition.</t>
    		
    		<t>HNCP uses opaque 32-bit node identifiers (DNCP_NODE_IDENTIFIER_LENGTH = 32).
    		A node attempting to run HNCP MUST generate and use a random node identifier.
    		If a collision occurs (the DNCP network already has a node state
    		with the same node identifier and a higher latest update sequence number)
    		the node detecting it MUST immediately generate and use a new random node identifier.</t>
    		
    		<t>HNCP nodes MUST NOT use the Long Network State Update message over the multicast channel,
    		i.e. all Network State Update messages send over multicast have the short form.</t>
    		
    		<t>HNCP nodes use the following Trickle parameters:
    		
    		<list>
     		<t>k SHOULD be 1, given the timer reset on data updates and
     		retransmissions should handle packet loss.</t>

     		<t>Imax SHOULD be 40 seconds but MUST NOT be lower.</t>

     		<t>Imin SHOULD be 200 milliseconds but MUST NOT be lower.
     		Note: Earliest transmissions may occur at Imin/2.</t>
     
     		</list>
    		</t>
    		
    		<t>HNCP nodes MUST use the leading 64 bits of <xref target="RFC1321">MD5</xref> as DNCP non-cryptographic hash function H(x).</t>
    		
    		<t>HNCP nodes MUST use the periodic keep-alive mechanism over unicast to all peers.
    		The keep-alive interval (DNCP_KEEPALIVE_INTERVAL) MUST be 24 seconds, the timeout interval (DNCP_TIMEOUT_INTERVAL)
    		MUST be 2.5 times the keep-alive interval (60 seconds), the grace-interval (DNCP_GRACE_INTERVAL) SHOULD be equal
    		to the keep-alive interval.</t>
    	</list>
    	</t>
    </section>

    <section title="Border Discovery">

      <t>This section defines the border discovery algorithm derived from the
      edge router interactions described in the <xref
      target="RFC7084">Basic Requirements for IPv6 Customer Edge
      Routers</xref>. The algorithm is designed to work for both IPv4 and
      IPv6 (single or dual-stack) and MUST be implemented by any router implementing HNCP.</t>

      <t>In order to avoid conflicts between border discovery and homenet
      routers running <xref target="RFC2131">DHCP</xref> or <xref
      target="RFC3633">DHCPv6-PD</xref> servers each router MUST implement
      the following mechanism based on <xref target="RFC3004">The User
      Class Option for DHCP</xref> or its <xref target="RFC3315">DHCPv6
      counterpart</xref> respectively into its DHCP and DHCPv6-logic:

      <list>

	<t>A homenet router running a DHCP-client on a homenet-interface
	MUST include a DHCP User-Class consisting of the ASCII-String
	"HOMENET".</t>

	<t>A homenet router running a DHCP-server on a homenet-interface
	MUST ignore or reject DHCP-Requests containing a DHCP User-Class
	consisting of the ASCII-String "HOMENET".</t>

      </list>
      </t>

      <t>The border discovery auto-detection algorithm works as follows,
      with evaluation stopping at first match:

      <list style="numbers">
      <t>If a fixed category is set for an interface, it MUST be used.</t>

	  <t>If a delegated prefix could be acquired by running a DHCPv6-client
	  on the interface it MUST be considered external.</t>

	  <t>If an IPv4-address could be acquired by running a DHCP-client on
      the interface it MUST be considered external.</t>

      <t>Otherwise the interface MUST be considered internal.</t>
      </list>
      </t>

      <t>A router MUST allow setting a category of either auto-detected,
      internal or external for each interface which is suitable for both
      internal and external connections. In addition the following
      specializations of the internal category are defined to modify the local router behavior:

      <list>
      	<t>Leaf category: This declares an interface used by clients only.
      	A router SHOULD implement this category and MUST NOT send
      	nor accept HNCP messages on these interfaces.</t>

        <t>Guest category: This declares an interface used by untrusted
        clients only. In addition to the restrictions of the leaf
        category, clients connected to these interfaces MUST NOT be able
        to reach devices inside the home network by default and instead
        SHOULD only be able to reach the internet. This category SHOULD be
        also supported.</t>

        <t>Ad-hoc category: This declares an interface to be in ad-hoc mode. This
        indicates to HNCP applications such as prefix assignment that links
        on this interface are potentially non-transitive. This category MAY
        be implemented.</t>

        <t>Hybrid category: This allows the router to still accepts external connections but
        does not do border discovery.  It is assumed that the link is under
        control of a legacy, trustworthy non-HNCP router, still within the
        same home network. Detection of this category automatically in
        addition to manual configuration is out
        of scope for this document. This category MAY be implemented.</t>
      </list>
      </t>

      <t>Each router MUST continuously scan each active interface that does
      not have a fixed category in order to dynamically reclassify it if
      necessary.  The router therefore runs an appropriately configured
      DHCP and DHCPv6-client as long as the interface is active including
      states where it considers the interface to be internal. The router
      SHOULD wait for a reasonable time period (5 seconds as a possible
      default) in which the DHCP-clients can acquire a lease before
      treating a newly activated or previously external interface as
      internal. Once it treats a certain interface as internal it MUST
      start forwarding traffic with appropriate source addresses between
      its internal interfaces and allow internal traffic to reach external
      networks.  Once a router detects an interface to be external it MUST
      stop any previously enabled internal forwarding. In addition it
      SHOULD announce the acquired information for use in the homenet as
      described in later sections of this draft if the interface appears to
      be connected to an external network.</t>
</section>

<section title="TLV-Definitions for prefix assignment purposes">
	  <t>The following TLVs are defined to announce prefix and addressing
	  information using HNCP. Each HNCP-node using these TLVs
	  MUST implement and follow the relevant sections of
      <xref target="I-D.ietf-homenet-prefix-assignment">Prefix and
      Address Assignment in a Home Network</xref>.</t>

      <t>To distribute an external connection in the homenet an edge router
      announces one or more delegated prefixes and associated
      DHCP(v6)-encoded auxiliary information like recursive
      DNS-servers. Each external connection is announced using one
      container-TLV as follows:</t>

      <figure>
	<artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Type: EXTERNAL-CONNECTION (33)|          Length: > 4          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          Nested TLVs                          |
	</artwork>
      </figure>


      <t>Auxiliary connectivity information is encoded as a stream of
      DHCPv6-attributes or DHCP-attributes placed inside a TLV of type
      EXTERNAL-CONNECTION or DELEGATED-PREFIX (for IPv6 prefix-specific
      information).  There MUST NOT be more than one instance of this TLV
      inside a container and the order of the DHCP(v6)-attributes contained
      within it MUST be preserved as long as the information contained does
      not change. The TLVs are encoded as follows:</t>

      <figure>
	<artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Type: DHCPV6-DATA (37)     |          Length: > 4          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    DHCPv6 attribute stream                    |
	</artwork>
      </figure>

      <t>and</t>

      <figure>
	<artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type: DHCP-DATA (38)      |          Length: > 4          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      DHCP attribute stream                    |
	</artwork>
      </figure>


      <t>Each delegated prefix is encoded using one TLV inside an
      EXTERNAL-CONNECTION TLV. For external IPv4 connections the prefix is
      encoded in the form of an <xref target="RFC4291">IPv4-mapped
      address</xref> and is usually from a <xref target="RFC1918">private
      address range</xref>.  The related TLV is defined as follows.</t>

      <figure>
	<artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Type: DELEGATED-PREFIX (34)  |         Length: >= 13         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Valid Lifetime                         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                      Preferred Lifetime                       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Prefix Length |                                               |
+-+-+-+-+-+-+-+-+        Prefix Address [+ nested TLVs]         +
|                                                               |
	</artwork>
      </figure>

      <t>
	<list>
	  <t>Valid Lifetime is the time in seconds the delegated prefix
          is valid. The value is relative to the point in time the node's
          Node-Data TLV was last published, i.e. it MUST be updated whenever
          the node republishes its Node-Data TLV.</t>

	  <t>Preferred Lifetime is the time in seconds the delegated
          prefix is preferred. The value is relative to the point in time the node's
          Node-Data TLV was last published, i.e. it MUST be updated whenever
          the node republishes its Node-Data TLV.</t>

	  <t>Prefix length specifies the number of significant bits in the
          prefix.</t>

	  <t>Prefix address is of variable length and contains the
	  significant bits of the prefix padded with zeroes up to the next
	  byte boundary.</t>

	  <t>Nested TLVs might contain prefix-specific information like
          DHCPv6-options.</t>

	</list>
      </t>

      <t>In order for routers to use the distributed information, prefixes
      and addresses have to be assigned to the interior links of the
      home network. The following TLVs are defined for that purpose.</t>

      <t>Each assigned prefix is given to an interior link and is encoded
      using one TLVs.  Assigned IPv4-prefixes are stored as mapped
      IPv4-addresses. The TLV is defined as follows:</t>

      <figure>
	<artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Type: ASSIGNED-PREFIX (35)   |          Length: >= 9         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Link Identifier                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   R.  | Pref. | Prefix Length |                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+         Prefix Address        +
|                                                               |
	</artwork>
      </figure>
      <t>
	<list>
	  <t>Link Identifier is the DNCP link identifier of the link the
          prefix is assigned to.</t>

	  <t>R. is reserved for future additions and MUST be set to 0 when
          creating TLVs and ignored when parsing them.</t>

	  <t>Pref. describes the preference of the assignment and can be
          used to differentiate the importance of a given assignment over
          others.</t>

	  <t>Prefix length specifies the number of significant bits in the
          prefix.</t>

	  <t>Prefix address is of variable length and contains the
	  significant bits of the prefix padded with zeroes up to the next
	  byte boundary.</t>
	</list>
      </t>

      <t>In some cases (e.g. IPv4) the set of addresses is very limited and
      stateless mechanisms are not really suitable for address assignment.
      Therefore HNCP can manage router address in these cases by itself.
      Each router assigning an address to one of its interfaces announces
      one TLV of the following kind:</t>

      <figure>
	<artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Type: NODE-ADDRESS (36)    |           Length: 24          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Link Identifier                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                           IP-Address                          |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	</artwork>
      </figure>

      <t>
	<list>
	  <t>Link Identifier is the DNCP link identifier of the link the
          address is assigned to.</t>

	  <t>IP-Address is the IP-address assigned to one of the node
	  interfaces. IPv4-addresses are represented as <xref target="RFC4291">IPv4-mapped
      addresses</xref>.</t>
	</list>
      </t>
    </section>

    <section title="Naming and service discovery">
    
      <t>Network-wide naming and service discovery is an important part of a
      user-friendly IPv6 home network. The following mechanism provides
      means to setup and delegate naming and service discovery across
      multiple HNCP routers.</t>
    
      <t>Each HNCP-router SHOULD provide
      an auto-generated or user-configured name for each
      internal link for which it is the designated DHCP or stateful DHCPv6-server
      and provide DNS-services on behalf of devices on said link.
      This can be done e.g. by providing a DNS-to-MDNS proxy
      and / or by resolving device hostnames acquired using DHCP, DHCPv6 or other means via DNS
      and announcing a DNS-Delegated-Zone TLV for said link.
      In addition reverse lookup services and delegations MAY be provided with the same means.</t>

      <t>The following TLVs are defined for naming and service-discovery
      which all nods implementing HNCPs naming and service discovery
      MUST implement.</t>

      <section anchor="delegated-zone-tlv" title="DNS Delegated Zone TLV">
      
      <t>This TLV is used to announce a forward or reverse DNS zone delegation
      in the home network. Its meaning is roughly equivalent to specifying
      an NS and A/AAAA record for said zone. There MUST NOT be more than one
      delegation for the same zone, in case of a conflict the announcement of the node
      with the higher node identifier takes precendence.</t>
      
<!-- TODO: should this have an (optional) Link Identifier as well so
we can ensure uniqueness and get rid of that awkward IP-address from assigned prefix restriction?
Or should this be tied to a "designated router" or "designated DHCP server" of some sort? -->
<!--  NOTE: changed B and S so L is near B  -->
        <figure>
          <artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| Type: DNS-DELEGATED-ZONE (39) |        Length: >= 21          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                           IP-Address                          |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|reserved |L|B|S|                                               |
+-+-+-+-+-+-+-+-+  Zone (DNS label sequence - variable length)  |
|                                                               |
          </artwork>
        </figure>
        
    <t>
	<list>
	  <t>IP Address is the IPv6-address of the authoritative DNS-server for the zone;
	  IPv4-addresses are represented as <xref target="RFC4291">IPv4-mapped addresses</xref>.
	  The special value of :: (all-zero) means the delegation is available in the regular
	  global DNS-hierarchy.</t>

	  <t>reserved bits MUST be zero when creating and ignored when parsing this TLV.</t>
	  
	  <t>L-Bit (DNS-SD Legacy-Browse) indicates that this delegated zone should be included in
      the network's DNS-SD legacy browse list of domains at lb._dns-
      sd._udp.(DOMAIN-NAME).  Local forward zones SHOULD have this set.
      Reverse zones SHOULD NOT have this set.</t>
      
      <t>B-Bit (DNS-SD Browse) indicates that this delegated zone should be included in
      the network's DNS-SD legacy browse list of domains at b._dns-
      sd._udp.(DOMAIN-NAME).  Local forward zones SHOULD have this set.
      Reverse zones SHOULD NOT have this set.</t>
      
      <t>S-Bit (fully-qualified DNS-SD-domain) indicates that this delegated zone consists of a
      fully-qualified DNS-SD domain, which should be used as base for DNS-SD domain enumeration,
      i.e. _dns-sd._udp.(Zone) exists.  Forward zones MAY have this set.
      Reverse zones MUST NOT have this set. This can be used to provision DNS search path
      to hosts for non-local services (such as those provided by an ISP,
      or other manually configured service providers).</t>
<!-- TODO: should this be indicated by trailing 0-Label instead? (i.e. zone="foo.bar" vs zone="foo.bar.com.")  -->
      
      <t>Zone is the label sequence of the zone, encoded according to <xref target="RFC1035"/>.
      Compression MUST NOT be used. The zone MUST end with an empty label.</t>
	</list>
	</t>
      </section>
      

      <section anchor="domain-name-tlv" title="Domain Name TLV">

		<t>This TLV is used to indicate the base domain name for the network.
		It is the zone used as a base for all non fully-qualified delegated zones and node names.
		In case of conflicts the announced domain of the node with the highest
		node identifier takes precedence. By default, if no node advertises such a TLV,
		".home" is used as a default.</t>

        <figure>
          <artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Type: DOMAIN-NAME (40)     |         Length: >= 4          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Domain (DNS label sequence - variable length)          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          </artwork>
        </figure>
        
        <t>
	<list>
      <t>Domain is the label sequence encoded according to <xref target="RFC1035"/>.
      Compression MUST NOT be used. The zone MUST end with an empty label.</t>
	</list>
	</t>

      </section>
      <section anchor="router-name-tlv" title="Node Name TLV">
      
      <t>This TLV is used to announce the name of a node in the network.
		In case of conflicts the announcement of the node with the highest
		node identifier takes precedence. A node announcing such a TLV
		MUST also announce at least one Node-Address TLV which is used
		as destination address.</t>
      
        <figure>
          <artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|     Type: NODE-NAME (41)      |         Length: >= 4          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         Name (not null-terminated - variable length)          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          </artwork>
        </figure>
      </section>
    </section>


    <section title="Securing third-party protocols">
      <t>Pre-shared keys are often required to secure IGPs and other protocols run in home networks which lack support for asymmetric security.
    	The following mechanism defines a way to manage such keys by HNCP to be used for bootstrapping third-party prtocols and SHOULD therefore be used if such a need arises.
    	The following rules determine how such a PSK is managed and used:

    	<list>
    	<t>If no Managed-PSK-TLV is currently being announced, an HNCP-router creates one with a 32-Byte long random key and adds it to its node-data.</t>
    	<t>In case multiple routers announce such a TLV at the same time, all but the one with the highest router-ID stop advertising it and adopt the remaining one.</t>
    	<t>The router currently advertising the Managed-PSK-TLV must generate and advertise a new random one
    	whenever the HNCP security mechanism stops trusting one or more trusted devices - i.e. HNCP is secured with a PSK itself and it was changed
    	or a certificate has changed from trusted to distrusted.</t>
    	</list>
    	</t>

		<figure>
        <artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Type: Managed-PSK (42)     |          Length: 36           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                                                               |
|                                                               |
|                                                               |
|                           Random PSK                          |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        </artwork>
      </figure>

      	<t>
      	PSKs for individual protocols are derived from the random PSK through the use of <xref target="RFC6234">HMAC-SHA256</xref>
      	with a pre-defined per-protocol HMAC-key in ASCII-format. The following HMAC-keys are currently defined to
      	derive PSKs for the respective protocols:

      	<list>
      	<t>"ROUTING": to be used for IGPs</t>
      	</list>
      	</t>
    </section>
    
      <section anchor="version-tlv" title="HNCP-Versioning">
      <t>Multiple versions of HNCP based on compatible DNCP profiles
      may be present in the same network when transitioning.
      The following mechanism describes a way to announce the currently
      active version and User-agent of a node. Each node MUST
      include a HNCP-Version-TLV in its Node Data and MUST ignore any
      TLVs with a type greater than 32 for nodes not publishing an
      HNCP-Version TLV or publishing such a TLV with a different Version
      number.</t>
      
	<figure>
          <artwork>
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Type: HNCP-VERSION (32)    |         Length: >= 9          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|    Version    |                  (reserved)                   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                          User-agent                           |
          </artwork>
        </figure>

        <t>Version indicates which version of HNCP
        is currently in use by this particular node. It MUST be set to 0.</t>
        
        <t>(reserved) bits must be set to 0 when creating and ignored when parsing this TLV.</t>
        
        <t>The user-agent is a null-terminated human-readable UTF-8 string that
        describes the name and version of the current HNCP implementation.</t>

      </section>

    <section title="Requirements for HNCP-routers">
    	<t>Each router implementing HNCP is subject to the following requirements:
    	<list>
    		<t>It MUST implement HNCP-Versioning, Border Discovery and Prefix Assignment as defined in this document.</t>
    		<t>It MUST implement and run the method for securing third-party protocols whenever it uses the security mechanism of HNCP.</t>
    		<t>It SHOULD implement support for the Service Discovery and Naming TLVs as defined in this document.</t>
    		<t>It MUST implement and run the routing protocol $FOO [RFCXYZ] with support for source-specific routes
    		on all of the interfaces it sends and receives HNCP-messages on and MUST resort to announcing
    		source-specific routes for external destinations appropriately.</t>
    		<t>It MUST use adequate security mechanisms for the routing protocol on any interface
    		where it also uses the security mechanisms of HNCP. If the security mechanism is based on a PSK
    		it MUST use a PSK derived from the Managed-PSK to secure the IGP.</t>
    		<t>It MUST comply with the <xref target="RFC7084">Basic Requirements for IPv6 Customer Edge Routers</xref>
    		unless it would otherwise conflict with any requirements in this document. "WAN interface requirements" shall
    		apply to external interfaces and "LAN interface requirements" to internal interfaces respectively.</t>
    		<t>It SHOULD be able to provide connectivity to IPv4-devices using DHCP.</t>
    		<t>It SHOULD be able to delegate prefixes to legacy IPv6-routers using DHCPv6-PD.</t>
    	</list></t>
    </section>

    <section title="Security Considerations">

      <section title="Abstract">
	      <t>HNCP is designed to make home networks self-configuring, requiring as little user
	      intervention as possible. However this zero-configuration goal usually conflicts with
	      security goals and introduces a number of threats.</t>

	      <t>General security issues for existing home networks are discussed at length
          in <xref target="RFC7368" />. The protocols used to
          set up addresses and routes in home networks today have rarely security enabled
          within the control protocol itself. However these issues are out of scope
          for the security of HNCP itself.</t>

          <t>HNCP inherits the security properties of DNCP.</t>
	  </section>

	  <section title="Scope">
	      <t>HNCP is a state synchronization mechanism carrying information with varying threat potential.
	      For this consideration the payloads defined in DNCP and this document are reviewed:

	      <list>
		<t>Network topology information such as HNCP nodes and their adjacent links</t>
		<t>Address assignment information such as delegated and assigned prefixes for individual links</t>
		<t>Naming and service discovery information such as auto-generated or customized names for individual links and routers</t>
	      </list>
	      </t>
	  </section>

      <section title="Border Determination">
    	<t>In general an HNCP-router determines the internal or external state on a per-link scale
    	and creates a firewall-perimeter and allows HNCP- and IGP-traffic based on the individual results.
    	These are provided by either automatic border discovery or a predefined configuration
    	indicated by e.g. the link-type, a physically dedicated (labeled) port or the administrator.</t>

    	<t>Threats concerning automatic border discovery cannot be mitigated by encrypting or authenticating
    	HNCP-traffic itself since external routers do not participate in the protocol
    	and often cannot be authenticated by other means. These threats include propagation
    	of forged uplinks in the homenet in order to e.g. redirect traffic destined to external locations and
    	forged internality by external routers to e.g. circumvent the perimeter firewall.</t>

    	<t>It is therefore imperative to either secure individual links on the physical or link-layer or preconfigure
    	the adjacent interfaces of HNCP-routers to an adequate fixed-category in order to secure the homenet border.
    	Depending on the security of the external link eavesdropping, man-in-the-middle and similar attacks
    	on external traffic can still happen between a homenet border-router and the ISP,
    	however these cannot be mitigated from inside the homenet. For example, DHCP has defined
        <xref target="RFC3118" /> to authenticate DHCP messages, but this is
        very rarely implemented in large or small networks.  Further, while
        PPP can provide secure authentication of both sides of a point to
        point link, it is most often deployed with one-way authentication of
        the subscriber to the ISP, not the ISP to the subscriber.</t>
    </section>

    <section title="Security of unicast traffic">
    	<t>Once the homenet border has been established there are several ways to secure HNCP against
    	internal threats like manipulation or eavesdropping by compromised devices on a link which
    	is enabled for HNCP-traffic. If left unsecured attackers may cause arbitrary eavesdropping, spoofing
    	or denial of service attacks on HNCP-services such as address assignment or service discovery.</t>

    	<t>
    	Detailed interface categories like "leaf" or "guest" can be used to integrate not fully trusted
    	devices to various degrees into the homenet by not exposing them to HNCP and IGP traffic
    	or by using firewall rules to prevent them from reaching homenet-internal resources.</t>

    	<t>On unsecured links <xref target="RFC6347">DTLS</xref> can be used as noted above to secure traffic.
    	In this case security considerations of said protocol apply.</t>
    </section>

    <section title="Other protocols in the home">
    	<t>IGPs and other protocols are usually run alongside HNCP therefore
    	the individual security aspects of the respective protocols must be considered.
    	It can however be summarized that many protocols to be run in the home (like IGPs)
    	provide - to a certain extent - similar security mechanisms.
    	Most of these protocols do not support encryption and only support authentication
    	based on pre-shared keys natively.
    	This influences the effectiveness of any encryption-based security mechanism deployed
    	by HNCP as homenet routing information is thus usually not encrypted.</t>
    </section>

    </section>

    <section anchor="iana" title="IANA Considerations">

      <t>IANA is requested to maintain a registry for HNCP TLV-Types.</t>
      <t>HNCP inherits the TLV-Types defined in DNCP.
      In addition the following TLV-Types are defined in this document:

      <list>
        <t>32: HNCP-Version</t>
      	<t>33: External-Connection</t>
      	<t>34: Delegated-Prefix</t>
      	<t>35: Assigned-Prefix</t>
      	<t>36: Node-Address</t>
      	<t>37: DHCP-Data</t>
      	<t>38: DHCPv6-Data</t>
      	<t>39: DNS-Delegated-Zone</t>
      	<t>40: Domain-Name</t>
      	<t>41: Node-Name</t>
        <t>42: Managed-PSK</t>
      </list>
      </t>

      <t>HNCP requires allocation of UDP port numbers
      HNCP-UDP-PORT and HNCP-DTLS-PORT, as well as an IPv6 link-local
      multicast address All-Homenet-Routers.</t>

    </section>

  </middle>
  <back>
    <references title="Normative references">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.RFC.6347.xml"?>
      <?rfc include="reference.I-D.draft-ietf-homenet-prefix-assignment-01"?>
    </references>

    <references title="Informative references">
      <?rfc include="reference.RFC.7084.xml"?>
      <?rfc include="reference.RFC.3004.xml"?>
      <?rfc include="reference.RFC.3118.xml"?>
      <?rfc include="reference.RFC.2131.xml"?>
      <?rfc include="reference.RFC.3315.xml"?>
      <?rfc include="reference.RFC.3633.xml"?>
      <?rfc include="reference.RFC.1918.xml"?>
      <?rfc include="reference.RFC.4291.xml"?>
      <?rfc include="reference.RFC.7368.xml"?>
      <?rfc include="reference.RFC.1035.xml"?>
      <?rfc include="reference.RFC.6234.xml"?>
      <?rfc include="reference.RFC.1321.xml"?>
    </references>

    <section title="Changelog">

      <t>draft-ietf-homenet-hncp-03: Split to DNCP (generic protocol) and
      HNCP (homenet profile).</t>

      <t>draft-ietf-homenet-hncp-02: Removed any built-in security. Relying
      on IPsec. Reorganized interface categories, added requirements languages,
      made manual border configuration a MUST-support. Redesigned routing
      protocol election to consider non-router devices.</t>

      <t>draft-ietf-homenet-hncp-01: Added (MAY) guest, ad-hoc, hybrid
      categories for interfaces. Removed old hnetv2 reference, and now
      pointing just to OpenWrt + github. Fixed synchronization algorithm to
      spread also same update number, but different data hash case. Made
      purge step require bidirectional connectivity between nodes when
      traversing the graph. Edited few other things to be hopefully
      slightly clearer without changing their meaning. </t>

      <t>draft-ietf-homenet-hncp-00: Added version TLV to allow for TLV content
      changes pre-RFC without changing IDs. Added link id to assigned
      address TLV. </t>

    </section>

    <section title="Draft source">
      <t>This draft is available at <eref
      target="https://github.com/fingon/ietf-drafts/">https://github.com/fingon/ietf-drafts/</eref>
      in source format. Issues and pull requests are welcome.</t>
    </section>

    <section title="Acknowledgements">

      <t>Thanks to Ole Troan, Pierre Pfister, Mark Baugher, Mark Townsley
      and Juliusz Chroboczek for their contributions to the draft.</t>

      <t>Thanks to Eric Kline for the original border discovery work.</t>

    </section>

  </back>
</rfc>
