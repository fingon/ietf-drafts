<?xml version='1.0' ?>
<!--
Created:       Mon Nov 18 17:55:22 2013 mstenber
Last modified: Fri Jan 31 14:32:57 2014 mstenber
Edit time:     477 min
-->

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>

<?rfc autobreaks="yes"?>
<?rfc compact="yes"?>
<?rfc strict='yes'?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>

<rfc
    ipr='trust200902'
    docName='draft-stenberg-homenet-hncp-00'
    category='std'
    >
  <front>
    <title abbrev="Home Networking Control Protocol">
      Home Networking Control Protocol
    </title>
    <author initials="M" surname="Stenberg" fullname="Markus Stenberg">
      <address>
        <postal>
          <street/>
          <city>Helsinki</city>
          <code>00930</code>
          <country>Finland</country>
        </postal>
        <email>markus.stenberg@iki.fi</email>
      </address>
    </author>
    <date month="January" year="2014" />

    <!--    <workgroup></workgroup> -->

    <keyword>IPv6</keyword>
    <keyword>Homenet</keyword>
    <abstract>

      <t>This document describes HNCP, a minimalist state synchronization
      protocol for a homenet (or other small site). </t>

    </abstract>
  </front>
  <middle>
    <section title="Introduction">

      <t>This document describes HNCP, a protocol designed to synchronize 
      state across a homenet (or small site) in order to facilitate automated configuration 
      within the site, integration with trusted bootstrapping 
      [draft-behringer-homenet-trust-bootstrap] and default perimeter 
      detection [draft-kline-default-perimeter], automatic IP prefix distribution [generic-PA ref], 
      and service discovery across multiple links within the homenet as defined in [generic-SD ref]. </t>
      
      <t>HCNP is designed to provide enough bootstrapping information for a routing protocol to operate independently 
      without homenet-specific extensions. In homenet environments where multiple IPv6 prefixes are present, 
      routing based on source and destination address is necessary [troan-sadr]. Routing protocol requirements for 
      source and destination routing is described in section 3 of 
      [draft-baker-rtgwg-src-dst-routing-use-cases-00]. </t>
      
    </section>

    <section title="Data model">

      <t>Data model of the HNCP protocol is simple: Every participating node
      has (and also knows for every other participating node):
      <list>
        <t>An unique, possibly long node identifier (the length does not
        really matter very much, as only the hash of it is used; however,
        it should be unique across the network). It can be a public key, or
        some other unique blob of binary data if signatures are not
        used.</t>

        <t>A set of Type-Length-Value (TLV) data it wants to share with the
        rest of then etwork. The TLVs are assumed to be sorted in ascending
        order based on their binary content. </t>

        <t>Latest update number (a 32-bit number that MUST be incremented
        whenever the TLV data changes).</t>

        <t>Relative time since publishing of the current TLV data set (in
        milliseconds).</t>

      </list>
      </t>
      
      <t>If signatures are in use, every node also has their own private
      key that corresponds with their public key. The private key is not
      shared across the network, but is instead used for signatures of
      messages and node state updates if desirable.</t>
    </section>

    <section title="Operation">

      <t>The protocol is designed to run on UDP port IANA-UDP-PORT, using
      both link-local scoped IPv6 unicast and link-local scoped IPv6
      multicast messages to address IANA-MULTICAST-ADDRESS for
      transport. The protocol consists of Trickle-driven multicast status
      messages, and unicast based neighbor state synchronization
      exchanges. </t>

      <section title="Regular Trickle-driven status updates">

        <t>Every node is responsible for sending link-local multicast network
        state messages defined in <xref target="net-message"/> every time
        Trickle algorithm defined in <xref target="RFC6206"/> indicates
        they should on every link the protocol is active on. Separate
        Trickle state MUST be maintained for each link.</t>

        <t>Trickle algorithm has 3 parameters; Imin, Imax and k. Imin and
        Imax represent minimum and maximum values for I, time interval
        during which at least k Trickle update must be seen on a link to
        prevent local state transmission. This specification does NOT
        mandate any defaults, but given the timer reset on data updates,
        k=1 SHOULD be used (as later retransmissions should handle packet
        loss in any case). Imax MUST be at least a minute. Imin MUST be at
        least 200 milliseconds (earliest transmissions may occur at Imin/2
        = 100 milliseconds given minimum values).</t>

        <t>When locally stored network state hash changes (either by local
        node TLV state change, or by receiving of more recent data from
        other nodes), all Trickle instances MUST be reset.</t>

      </section>

      <section title="Handling of received packets" anchor="reception">
        <t>
          While Trickle should take care of sending of periodic status
          updates for most part (see caveats in <xref target="neighbor"
          />), the unicast and multicast packet reception should work as
          follows:</t>

        <t>

          <list style="numbers">

            <t>If it is a multicast message:
            <list style="numbers">

              <t>Verify it is a network state message defined in <xref
              target="net-message"/>. If the network state hash within the
              message matches hash of locally stored network state,
              consider Trickle state as consistent. In that case, there is
              no need to proceed further. If the hashes do not match,
              consider Trickle state as inconsistent and proceed to the
              next steps. </t>

              <t>If the message was in short format (that is, it contained
              no node state TLVs), send a network state request defined in
              <xref target="req-net-message"/> using IPv6 unicast to the
              sender of the multicast message.</t>

              <t>If the message was in long format (it contained one or
              more node state TLVs), send node state request defined in
              <xref target="req-node-message"/> 
              for any nodes for which our information is outdated (our
              update number is lower than that within the message) or
              missing using IPv6 unicast to the sender of the multicast
              message. Note that if our information is more recent than
              that of the neighbor, this may require sending nothing at
              all.
              </t>
            </list>
            </t>

            <t>If it is an unicast message:
            <list style="numbers">

              <t>If it is a request (either network state request defined in 
              <xref target="req-net-message"/> 
              , or node state request defined in 
              <xref target="req-node-message"/> 
              ), provide the required data in an unicast reply.
              </t>

              <t>If it is a reply which contains node state TLVs that seem
              more recent than ours for that node (higher update number or
              we lack the node data altogether), send node state request
              defined in
              <xref target="req-node-message"/> 
              for the node data for the corresponding nodes.
              </t>

              <t>If it is a reply which contains node data TLV which is
              more recent than what we have for the corresponding node,
              update our state and reset Trickle.
              </t>

            </list>
            </t>
            
          </list>
        </t>
      </section>

      <section title="Data updates">

        <t>Each node is responsible for publishing only a valid set of data
        in TLVs contained within it's own node data TLV. Whenever the node
        data TLV's content changes, the update number should be
        incremented.</t>


        <t>If a message containing node state TLV described in <xref
        target="node-state" /> is received via unicast or multicast with
        node's own node identifier and higher update number than current,
        or same update number and different hash, there is a problem in the
        network. There are two different ways to handle this: the default
        way to handle it is to make own update number higher than the
        received one and republish node data using the same node
        identifier. If this happens more than ID-CONFLICT-COUNT times in
        ID-CONFLICT-INTERVAL seconds AND the local node identifier
        is not globally unique, new node identifier should be generated and
        node data republished with the new node identifier. (This problem
        is relevant only if not using signatures; collision of node
        identifier hashes for public keys is not considered here due to low
        likelihood of it.)</t>

        <t>Regardless of how the node data for ANY node which node has
        changes, all Trickle instances MUST be considered inconsistent
        (I=Imin + timer reset).</t>
      </section>

      <section title="Removal of whole nodes">

        <t>Whenever set of node data has changed, nodes SHOULD do traversal
        of neighbor graph (by following the neighbor TLVs defined in <xref
        target="neighbor-tlv" /> from node to node), and after traversing
        the reachable graph, purge the nodes that weren't traversed as they
        are no longer reachable. </t>

      </section>
      
      <section title="Neighbor state maintenance" anchor="neighbor">

        <t>Whenever multicast message or unicast reply is received on a
        link from another node, the node should be added as neighbor TLV
        for current node. If nothing (for example - no router
        advertisements, no HNCP traffic) is received from that neighbor in
        UNREACHABLE-TIME seconds and the neighbor is not in neighbor
        discovery cache, at least REACH-ATTEMPTS attempts to ping it with
        request network state message defined in <xref
        target="req-net-message" /> SHOULD be sent with increasing timeouts
        (e.g. 1, 2, 4 seconds). If even after suitable period after the
        last message nothing is received, the neighbor TLV MUST be removed
        so that there are no dangling neighbors. As an alternative, if
        there is a layer 2 unreachability notification of some sort
        available for either whole link or for individual neighbor, it
        SHOULD be used to immediately trigger removal of corresponding
        neighbor TLV(s).</t>
      </section>

    </section>

    <section title="Messages">

      <t>Every message is encoded as a sequence of TLV
      objects described in <xref target="tlvs"/>. Therefore the message
      definition here defines just the set of TLVs expected in the
      particular message. 
      </t>
      
      <t>Note that in _every_ encoding scope (either root level within
      the message itself, or within container TLV), TLVs MUST be in
      ascending order based on binary comparison of both TLV header and
      value.</t>

      <section title="Network state message ((link-local) multicast)"
               anchor="net-message">
        <t>MUST be present:
        <list>
          <t>node link TLV (defined in <xref target="node-id"/>).</t>
          <t>network state TLV (defined in <xref target="net-hash"/>).</t>
        </list>
        </t>

        <t>There SHOULD be also _all_ node state TLV(s) (defined in <xref
        target="node-state"/>), if and only if inserting all of them within
        the message would not exceed the minimum IPv6 MTU. Sending of just
        some node state TLV(s) MUST NOT be done as it would confuse the
        packet reception algorithm described in <xref
        target="reception"/>. </t>

        <t>MAY be present: authentication TLVs (see <xref target="auth-tlvs" />).</t>

      </section>

      <section title="Request network state message (unicast)"
               anchor="req-net-message">
        <t>MUST be present:
        <list>
          <t>node link TLV (defined in <xref target="node-id"/>).</t>
          <t>request network state TLV (defined in <xref target="req-net-hash"/>).</t>
        </list>
        </t>

        <t>MAY be present: authentication TLVs (see <xref target="auth-tlvs" />).</t>

      </section>
      <section title="Request node(s) data message (unicast)"
               anchor="req-node-message">

        <t>MUST be present:
        <list>
          <t>node link TLV  (defined in <xref target="node-id"/>).</t>
          <t>one or more request node data TLVs (defined in <xref
          target="req-node-data" />)).</t>
        </list>
        </t>

        <t>MAY be present: authentication TLVs (see <xref target="auth-tlvs" />).</t>

      </section>
      <section title="Reply state message (unicast)"
               anchor="reply-message">
        <t>MUST be present:
        <list>
          <t>node link TLV  (defined in <xref target="node-id"/>).</t>

          <t>network state TLV (defined in <xref target="net-hash" />)
          and node state TLV (defined in <xref target="node-state" />) for
          every known node by the sender, or</t>

          <t>one or more combinations of node state and node data TLVs
          (defined in <xref target="node-data" />).</t>

        </list>
        </t>

        <t>MAY be present: authentication TLVs (see <xref target="auth-tlvs" />).</t>


      </section>
    </section>

    <section anchor="tlvs" title="Type-Length-Value objects">
      <t>
        Every TLV is encoded as 2 octet type, followed by 2 octet length
        (of the whole TLV, including header; 4 means no value whatsoever),
        and then the value itself (if any).

        The actual length of TLV MUST be always divisible by 4; if the
        length of the value is not, zeroed padding bytes MUST be inserted
        at the end of TLV. The padding bytes MUST NOT be included in the
        length field.
      </t>

      <figure>
        <artwork>
          0                   1                   2                   3
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |            Type               |           Length              |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          |                             Value                             |
          |                     (variable # of bytes)                     |
          +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
          TLV format
        </artwork>
      </figure>

      <t>
        Encoding of type=123 (0x7b) TLV with value 'x' (120 = 0x78):

        007B 0005 7800 0000
      </t>

      <t>Notation:
      <list>
        <t>.. = octet string concatenation operation</t>
        <t>H(x) = MD5 hash of x</t>
        <t>H-64(x) = H(x) truncated by taking just first 64 bits of the result.</t>
      </list>
      </t>


      <section title="Request TLVs (for use within unicast requests)">

        <section anchor="req-net-hash" title="Request network state TLV">

          <t>TLV with T=2, empty V.</t>

        </section>
        <section anchor="req-node-data" title="Request node data TLV">

          <t>TLV with T=3, V=H(node identifier).</t>

        </section>

      </section>
      <section title="Data TLVs (for use in both multi- and unicast data)">
        <section anchor="node-id" title="Node link TLV">

          <t>TLV with T=1, V=H(node identifier) .. link id (4 octets)</t>

        </section>
        <section anchor="net-hash" title="Network state TLV">

          <t>TLV with T=4, V=H(H(node data TLV 1) .. H(node data TLV N)).</t>
          
          <t>The node data are ordered for hashing by octet comparison of
          the corresponding node identifier hashes in ascending order.</t>

        </section>
        <section anchor="node-state" title="Node state TLV">

          <t>TLV with T=5, V=H(node identifier) .. update # (4 octets)
          .. milliseconds since origination (4 octets) .. H(node data TLV)</t>

          <t>Whole network should have roughly same idea about the time
          since origination; even the originating router should increment
          the time whenever it needs to send new node state TLV regarding
          itself without changing the corresponding node data TLV. It is
          not included within node data TLV, however, as that is immutable
          and potentially signed by the originating node at the time of
          origination.</t>

        </section>
        <section anchor="node-data" title="Node data TLV">

          <t>TLV with T=6, V=H(node identifier) .. update # (4 octets) .. a
          set of sub-TLVs.</t>

          <t>Public key TLV (described in <xref target="node-pk-tlv" />
          SHOULD be always included if signatures are ever used. </t>
          <t>If signatures in use, the node data TLV SHOULD also contain
          originator's own signature TLV. </t>
        </section>


        <section anchor="node-pk-tlv" title="Node public key TLV (within
                                             node data TLV)">
          <t>TLV with T=7, V=public key (=raw node identifier)</t>

          <t>Public key data for the node. Only relevant if signatures are
          used. Can be used to verify that H(node identifier) equals public
          key, and that the signature TLV within node data matches public
          key. </t>

        </section>

        <section anchor="neighbor-tlv" title="Neighbor TLV (within node data TLV)">
          <t>TLV with T=8, V=H(neighbor node identifier)  .. neighbor link id (4 octets).. local link id (4 octets)</t>
          <t>This TLV indicates that the node in question vouches that the
          specified neighbor is reachable by it on the local link id
          given. This reachability may be unidirectional (if no unicast
          exchanges have been performed with the neighbor). The TLV at least 
          guarantees that the node publishing the TLV has received traffic
          from the neighbor recently. For guaranteed bidirectional
          reachability, existence of both nodes' matching neighbor TLVs
          should be checked. </t>
        </section>

      </section>

        <section anchor="user-tlv" title="Custom TLV (within/without node data TLV)">
          <t>TLV with T=9, V=H-64(URI) .. opaque data</t>
          <t>This TLV can be used to contain anything; the URI used should be
          under control of the author of that specification. 
          For example:</t>
          
          <t>V=H-64('http://example.com/author/json-for-hncp') .. '{"cool": "json
          extension!"}'</t>

          <t>or</t>

          <t>V=H-64('mailto:author@example.com') .. '{"cool": "json
          extension!"}'</t>

        </section>

      <section title="Authentication TLVs" anchor="auth-tlvs">

        <section title="Certificate-related TLVs">

          <t>TBD; should be probably some sort of certificate ID to be used
          in a lookup at most, as raw certificates will overflow easily IPv6
          minimum MTU.</t>

        </section>
        <section title="Signature TLV">

          <t>TLV with T=0xFFFF, V=(TBD) public key algorithm based
          signature of all TLVs within current scope as well as the parent
          TLV header, if any. The assumed signature key is private key
          matching the public key of the the originator of node link TLV
          (if signature TLV is within main body of message), or that of the
          originator of the node data TLV (if signature TLV is within node
          data TLV)..</t>

        </section>
      </section>
    </section>

    <section title="Security Considerations">
      <t>There are at least 3 ways in which this protocol can be deployed:

      <list>
        
        <t>Simplest model is "have faith" mode; no security, no
        signatures. Instead of public key, just some unique hardware
        fingerprint or something equivalent should be used. </t>
        
        <t>Slightly more trustworthy (as long as you trust every router in
        your network) is to use manually keyed IPsec using the per-port
        granularity for port IANA-UDP-PORT UDP traffic. The painful part in
        this mode is setting up the pre-shared key as IKE cannot be used
        with multicast traffic. </t>
        
        <t>If even every router cannot be trusted, or some more guarantees
        about source of particular node status updates is desired, real
        public and private keys should be used to create signatures and 
        verify them both on per-node data TLVs, as well as whole packet level.
        </t>
        
      </list>
      </t>
      
      <t>In the "have faith mode", the protocol is wide open to a variety
      of attacks. On the other hand, in the in-protocol cryptography mode,
      care must be taken in rate limiting verification of invalid packets,
      as otherwise denial of service may occur due to exhaustion of
      computation resources on a router. </t>

      <t>As performance optimization, instead of providing signatures for
      actual node data and the protocol messages themselves, it is also
      possible to provide signatures just for protocol messages. If doing
      that, it is no longer possible to verify original source of node
      data, but as long as the set of routers is still trusted, it should
      not matter.</t>

    </section>


    <section anchor="const" title="Protocol constants">
      <t>Imin (for Trickle) >= 200 milliseconds</t>
      <t>Imax (for Trickle) >= 60 seconds</t>
      <t>k (for Trickle) suggested to be 1</t>

      <t>ID-CONFLICT-COUNT and ID-CONFLICT-INTERVAL are left up
      to the implementation (they are local choices)</t>

      <t>UNREACHABLE-TIME should be proportional with Imax
      (smaller values not useful; orders of magnitude larger values
      neither). Again local choice.</t>

      <t>REACH-ATTEMPTS should depend on media used, but at least
      'few', e.g. 3 times.</t>

    </section>
 
    <section anchor="iana" title="IANA Considerations">
      
      <t>IANA should set up a registry for HNCP TLV types, with following
      initial contents:</t>

      <t>0: Reserved (should not happen on wire)</t>
      <t>1: Node link</t>
      <t>2: Request network state</t>
      <t>3: Request node data</t>
      <t>4: Network state</t>
      <t>5: Node state</t>
      <t>6: Node data</t>
      <t>7: Node public key</t>
      <t>8: Neighbor</t>
      <t>9: Custom</t>
      <t>65535: Signature</t>

      <t>IANA should also allocate UDP port number IANA-UDP-PORT, as well as
      IPv6 link-local multicast address IANA-MULTICAST-ADDRESS for HNCP use.</t>

    </section>

  </middle>
  <back>
    <references title="Normative references">
      <?rfc include="reference.RFC.6206.xml"?>
    </references>
    <references title="Informative references">
      <?rfc include="reference.I-D.draft-troan-homenet-sadr-01.xml"?>
      <?rfc include="reference.I-D.draft-arkko-homenet-prefix-assignment-04.xml"?>
      <?rfc include="reference.I-D.draft-stenberg-homenet-dnssdext-hybrid-proxy-ospf-00.xml"?>
    </references>
    <section title="TODO">

      <t>Is there a case for non-link-local unicast? Currently explicitly
      stating this is link-local only protocol. </t>

      <t>Consider if using Trickle with k=1 really pays off, as we need to
      do reachability checks if L2 doesn't provide them periodically in any
      case. Using Trickle with k=inf would remove the need for unicast
      reachability checks, but at cost of extra multicast traffic. On the
      other hand, N*(N-1)/2 unicast reachability checks when lot of routers
      share a link is not appealing either.</t>

    </section>
    <section title="Q &amp; A">
      <t>Q: Why not use TCP?</t>

      <t>A: It doesn't address the node discovery problem. It also leads to
      N*(N-1)/2 connections when N nodes share a link, which is
      awkward. </t>

      <t>Q: Why effectively build a link state routing protocol without
      routing?</t>

      <t>A: It felt like a good idea at the time. It does not require
      periodic flooding except for very minimal Trickle-based per-link
      state maintenance (potentially also neighbor reachability checks if
      so desired).</t>

      <t>Q: Why not multicast-only?</t>

      <t>A: It would require defining application level fragmentation
      scheme. Hopefully the data amounts used will stay small so we just
      trust unicast UDP to handle 'big enough' packets to contain single
      node's TLV data.</t>

      <t>Q: Why so long IDs? Why real hash?</t>

      <t>A: Specifying conflict detection for smaller IDs was harder, and
      scalability of protocol isn't really affected by using real
      (=cryptographic) hash function.</t>

      <t>Q: Why trust IPv6 fragmentation in unicast case? Why not do L7
      fragmentation?</t>

      <t>A: Because it will be there for a while at least. And while PMTU
      et al may be problems on open internet, in a home network
      environment UDP fragmentation should NOT be broken in the foreseeable
      future. </t>

      <t>Q: Should there be nested container syntax that is actually
      self-describing? (i.e. type flag that indicates container, no body
      except sub-TLVs?)</t>

      <t>A: Not for now, but perhaps valid design.. TBD.</t>
      
      <t>Q: Why not doing (performance thing X, Y or Z)?</t>

      <t>A: This is designed mostly to be minimal (only timers Trickle
      ones; everything triggered by Trickle-driven messages or local state
      changes). However, feel free to suggest better (even more minimal)
      design which works. </t>

    </section>
    <section title="Draft source">
      <t>As usual, this draft is available at <eref
      target="https://github.com/fingon/ietf-drafts/">https://github.com/fingon/ietf-drafts/</eref>
      in source format (with nice Makefile too). Feel free to send comments
      and/or pull requests if and when you have changes to it! </t>
    </section>

    <section title="Implementation">

      <t>GPLv2 licensed experimental implementation of the protocol is
      available at <eref
      target="https://github.com/sbyx/hnetd/">https://github.com/sbyx/hnetd/</eref>. Comments
      and/or pull requests are welcomed to that too.</t>
    </section>

    <section title="Acknowledgements">

      <t>Thanks to Ole Troan, Steven Barth, Pierre Pfister and Mark Baugher
      for review comments.</t>

    </section>
    
  </back>
</rfc>
