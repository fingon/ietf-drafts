<?xml version='1.0' ?>
<!--
Created:       Fri Jul  3 08:40:24 2015 mstenber
Last modified: Mon Oct 12 20:54:30 2015 mstenber
Edit time:     104 min
-->

<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>

<?rfc autobreaks="yes"?>
<?rfc compact="yes"?>
<?rfc strict='yes'?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>

<rfc
    ipr='trust200902'
    docName='draft-stenberg-shsp-00'
    category='exp'
    >
  <front>
    <title abbrev="Simple Home Status Protocol">
      Simple Home Status Protocol
    </title>
    <author initials="M" surname="Stenberg" fullname="Markus Stenberg">
      <address>
        <postal>
          <street/>
          <city>Helsinki</city>
          <code>00930</code>
          <country>Finland</country>
        </postal>
        <email>markus.stenberg@iki.fi</email>
      </address>
    </author>
    <date month="Oct" year="2015" />
    <keyword>Homenet(??)</keyword>
    <abstract>

      <t>In reasonable home networks there are no cloud services; just a
      set of local nodes sharing state, and possibly invoking operations
      either automatically or on behalf of the home user. This document
      describes a key-value database that can be used to do both; published
      key=values represent the current state of the system, and by setting
      a key published by some other node to a different value a node can
      indicate the desire for changing of state.</t>

    </abstract>
  </front>
  <middle>
    <section title="Introduction">

      <t>In spirit of House Arkko Toaster/Laundry/et al, House Stenberg
      also has needs, although they are mostly related to various sensors,
      control of lights and various appliances.

      This leads to a a number of devices that need to discover each other,
      and share state and code (ideally) without central authorities, in fault
      tolerant fashion. And obviously it is also nice to have a log of what
      has occurred, and maintain software state in a distributed
      fashion. There are also some security needs; control of appliances
      can be a serious hazard if security is not addressed appropriately.

      SHSP is an attempt to produce a solution to address these needs.</t>

      <t>This document describes yet another DNCP-based protocol, which
      uses HNCP-style transport, yet intentionally is incompatible with it
      so that TLVs of SHSP and HNCP can be handled using same transport
      channel and de/encoders, but individual implementations of the
      different protocols can ignore each other unless they support both
      protocols.</t>


      <t>TBD: The long form of the acronym is actually misleading, as it is
      more about independent agents rampaging in home network, sharing
      state as they go. Figure a better name?</t>

    </section>
    <section anchor="kwd" title='Requirements language'>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      <xref target='RFC2119'>RFC 2119</xref>.</t>

    </section>


    <section title="DNCP Profile">

      <t>Hard work of SHSP is handled by <xref
      target="I-D.ietf-homenet-dncp">DNCP</xref>. DNCP profile of <xref
      target="I-D.ietf-homenet-hncp">HNCP</xref> is used as is. Arguably
      TCP-based solution would be better, but compatibility with existing
      implementations of HNCP to transfer state, and eventual port- and
      multicast address reservations of HNCP make it more attractive.
      Despite the reuse of the transport and DNCP core logic, NONE of the
      HNCP TLVs are part of SHSP.</t>

      <t>SHSP nodes MAY choose to use the DTLS method(s) specified in the
      DNCP document, but in practice if authentication is desirable,
      something more lightweight using simple PSKs + sha256 authentication
      may be used. To prevent providing a bad example, a concrete example
      is omitted. </t>

    </section>

    <section title="Overview">

      <t>SHSP provides a distributed key-value store, with each node having
      consistent view of the whole database. Essentially, the database
      provides view of ((int) node identifier, (string) key,
      (json-encodable) value, (UTC second)last changed at) pairs for any
      participant interested in viewing it.</t>

      <t>If we assume that keys in and of themselves are unique, then we
      can assume that someone else than the node responsible for
      particular resource belonging to that key publishing a key=value for
      it desires a state change, e.g. turning on a light.</t>

    </section>

    <section title="Device Data">

      <t>SHSP devices typically provide either boolean input/output, or
      some numeric output value for other nodes to use. Whatever can be
      transmitted inside JSON (particular key = particular value) is fine,
      but for example, in House Stenberg there are currently:

      <list style="symbols">

        <t>Light sensor: numeric value (in lux)
        .kh.light_sensor.(name)/value=(int).</t>

        <t>Philips Hue lights: boolean with key .kh.hue.(name)/on.
        (TBD: this could be also active color value)</t>

        <t>Motion sensor: boolean with key
        .kh.motion_sensor.(name)/on.</t>

        <t>Wifi device presence detection: boolean key with
        .kh.wifi.(name)/on.</t>

        <t>Process activity monitor: boolean key with .kh.process.(name)/on.</t>

        <t>(Computer) user activity monitor: boolean key with
        .kh.user_active.(name)/on.</t>
      </list>
      </t>


      <t>Very cut down example of what the state actually looks like in the
      whole network of devices, that is determined by looking at the whole
      DNCP network state, not just that of the local node, looks like this
      at the time of the writing of the document:</t>
      <figure>
        <artwork>
mstenber@poro ~>khtool -v
.kh.hue.Entry/on=False (-38)
.kh.light_sensor.corridor/value=86 (-37)
.kh.motion_sensor.corridor/on=False (-49)
.kh.process.kodi/on=False (-67807)
.kh.user_active.poro/on=True (-41)
.kh.wifi.iphone6/on=True (-5718)
...
        </artwork>
      </figure>

      <t>The numbers in parentheses identify second delta to current time
      when the state last changed. For example, apparently Kodi process was
      last running on the machine it is monitored on ~20 hours ago, and the
      light called Entry was turned off 38 seconds ago.</t>

    </section>

    <section anchor="tlvs" title="Type-Length-Value Objects">
      <t>
        SHSP requires only one TLV for it's own use:
      </t>

      <section title="SHSP Key-Value State TLV">
        <t>
          TBD: ASCII art

          <list style="symbols">
            <t>T=789 (TBD)</t>
            <t>V=
            JSON-encoded string, containing a dictionary with:
            <list style="symbols">

              <t>ts: (timestamp) when was the value most recently changed;
              number, expressed in seconds, UTC since UNIX epoch</t>

              <t>k: which key the value applies for</t>

              <t>v: the value of the key (any acceptable Json)</t>
            </list>
            </t>
          </list>

          For example, the value of the TLV describing Kodi state noted in
          the above example looks as follows:
          {"k": ".kh.process.kodi/on", "v": false, "ts": 1444598358.729439}
        </t>
        </section>

    </section>

    <section title="Security Considerations">

      <t>N/A</t>

    </section>
    <section title="IANA Considerations">

      <t>This document has no actions for IANA as it is informational for
      fun document, not really aimed for standards track.</t>

    </section>

  </middle>
  <back>
    <references title="Normative references">
      <?rfc include="reference.RFC.2119.xml"?>
      <?rfc include="reference.I-D.draft-ietf-homenet-dncp-06.xml"?>
      <?rfc include="reference.I-D.draft-ietf-homenet-hncp-06.xml"?>
    </references>
    <!-- <references title="Informative references"> -->
    <!-- </references> -->
    <section title="Changelog">
      <t>draft-stenberg-shsp-01:
      <list style="symbols">
        <t>Got rid of the Python agent section - while it is planned at
        some point, not implemented yet and I am mostly interested in
        documenting the current production scheme.</t>
        <t>Added concrete examples of sensors and current system output.</t>
      </list>
      </t>
    </section>

    <section title="Draft source">
      <t>As usual, this draft is available at <eref
      target="https://github.com/fingon/ietf-drafts/">https://github.com/fingon/ietf-drafts/</eref>
      in source format (with nice Makefile too). Feel free to send comments
      and/or pull requests if and when you have changes to it! </t>
    </section>

    <section title="Acknowledgements">
      <t>None yet, want to be the first?</t>
    </section>

  </back>
</rfc>
